substitutions:
  device_name: esp-wp-control

esphome:
  name: "${device_name}"
  on_boot:
    priority: 200
    then:
      lambda: !lambda |-
          //Set initial states
          id(force_update_stooklijn) = true;
          id(run_start) = false;
          id(minimum_run_time_passed) = false;
          id(switch_off_requested) = false;
          
packages:
  config_values: !include config/config.yaml

# Enable logging. Disable modbus controller debug messages
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN
    esp32.preferences: WARN
    sensor: WARN
    dallas.sensor: WARN

globals:
  - id: stooklijn_target
    type: float
    restore_value: no
    initial_value: '30'
  - id: force_update_stooklijn
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: working_mode
    type: int
    restore_value: no
    initial_value: '0'
  - id: var_pendel_watertemp_target
    type: float
    restore_value: no
    initial_value: '30'
  - id: run_start
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: minimum_run_time_passed
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: switch_off_requested
    type: bool
    restore_value: no
    initial_value: 'false'

number:
  - platform: template
    name: "Stooklijn offset"
    id: wp_stooklijn_offset
    min_value: -5
    max_value: 5
    initial_value: 0
    step: 1
    restore_value: yes
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_min_oat
    name: "Stooklijn Minimum Buitentemperatuur"
    min_value: -25
    max_value: 0
    step: 1
    restore_value: yes
    initial_value: -10
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_max_wtemp
    name: "Stooklijn Maximum Watertemperatuur"
    min_value: 20
    max_value: 60
    step: 1
    restore_value: yes
    initial_value: 45
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_min_wtemp
    name: "Stooklijn Minimum Watertemperatuur"
    min_value: 20
    max_value: 40
    step: 1
    restore_value: yes
    initial_value: 30
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_start_temp
    name: "Stooklijn Start Buitentemperatuur"
    min_value: 0
    max_value: 20
    step: 1
    restore_value: yes
    initial_value: 18
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: minimum_run_time
    name: "Minimale run tijd"
    min_value: 0
    max_value: 60
    step: 1
    restore_value: yes
    initial_value: 30
    unit_of_measurement: "min"
    optimistic: true
  - platform: template
    id: thermostat_off_delay
    name: "thermostat off delay"
    min_value: 0
    max_value: 10
    step: 1
    restore_value: yes
    initial_value: 1
    unit_of_measurement: "min"
    optimistic: true
  - platform: template
    id: thermostat_on_delay
    name: "thermostat on delay"
    min_value: 0
    max_value: 10
    step: 1
    restore_value: yes
    initial_value: 0
    unit_of_measurement: "min"
    optimistic: true
  - platform: template
    id: external_pump_runover
    name: "External pump overrun"
    min_value: 0
    max_value: 60
    step: 1
    restore_value: yes
    initial_value: 1
    unit_of_measurement: "min"
    optimistic: true
switch:
  - platform: output
    name: "Silent Mode"
    id: silent_mode_switch
    output: 'modbus_set_silent_mode'
  - platform: output
    id: sww_on_off
    name: "SWW On/Off"
    output: 'modbus_set_DHW_mode'

# External thermostat anti pendel script. Some thermostats (Eneco Toon is really bad) sometimes temporarily switches the output off, while heat is still needed
# This script delays switching the heating of for x minutes. If heating switches back on within this timeframe the script stops
# An other 'nice' feature of Toon is that it sometimes switches on the heating for only 1 or 2 minutes and then off again
script:
  - id: anti_pendel_off
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("thermostat-delay", "anti_pendel_off called.");
          //If heating active and compressor is not running, switch off instantly
          if(!id(compressor_running).state && id(working_mode) == 2){
            ESP_LOGD("thermostat-delay", "Compressor not running. Instant off.");
          }else {
            ESP_LOGD("thermostat-delay", "anti_pendel_off called. starting delay timer. minimum_run_time_passed: %d",id(minimum_run_time_passed));
          }
      - delay: !lambda "return id(thermostat_off_delay).state*60*1000;"
      - lambda: |-
          //If minimum run time passed switch off. Otherwise flag switch off requested (will be picked up by minimum_run_time_script)
          ESP_LOGD("thermostat-delay", "anti_pendel_off delay passed. minimum_run_time_passed: %d",id(minimum_run_time_passed));
          if(id(minimum_run_time_passed)||(!id(compressor_running).state && id(working_mode) == 2)){
          } else {
            id(switch_off_requested) = true;
          }
  - id: anti_pendel_on
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("thermostat-delay", "anti_pendel_on called starting delay timer.");
      - delay: !lambda "return id(thermostat_on_delay).state*60*1000;"
      - lambda: |-
          ESP_LOGD("thermostat-delay", "anti_pendel_on delay passed starting HP.");
          //Turn on HP
  - id: minimum_run_time_script
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("thermostat-delay", "minimum_run_time_script called starting delay timer.");
      - delay: !lambda "return id(minimum_run_time).state*60*1000;"
      - lambda: |-
          //Set minum run time passed to true, so that HP can switch off when thermostat switches off (after delay)
          ESP_LOGD("thermostat-delay", "minimum_run_time_script delay passed. switch_off_requested: %d",id(switch_off_requested));
          id(minimum_run_time_passed) = true;
          //Check if switch off was already requested
          if(id(switch_off_requested)){
            //Switch off
            id(anti_pendel_off).stop();
          }
  - id: external_pump_script
    mode: restart
    then:
      - delay: !lambda "return id(external_pump_runover).state*60*1000;"
      - lambda: |-
          //switch off pump after delay time

modbus:
  id: modbus_lg
  uart_id: uart_modbus
  send_wait_time: 200ms
  
uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  id: uart_modbus
  parity: none
  data_bits: 8
  stop_bits: 1

modbus_controller:
  - id: lg
    address: 0x1 # the Modbus device addr
    modbus_id: modbus_lg
    update_interval: 60s #this is our main 'clock' all dependel logic follows this pace
    setup_priority: -10

output:
  - platform: modbus_controller
    modbus_controller_id: lg
    id: water_temp_target_output
    register_type: holding
    address: 2
    value_type: U_WORD
    multiply: 1000
  - platform: modbus_controller
    modbus_controller_id: lg
    id: modbus_set_silent_mode
    register_type: coil
    address: 2
  - platform: modbus_controller
    modbus_controller_id: lg
    id: modbus_set_DHW_mode
    register_type: coil
    address: 1
    
 
binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Pump Running"
    id: pump_running
    register_type: discrete_input
    skip_updates: 1
    address: 1
    on_press:
      # Reset switch_off_requested
      - globals.set:
          id: switch_off_requested
          value: 'false'
      - script.execute: anti_pendel_on # Anti pendel script, to delay switch on for x minutes
      - script.stop: anti_pendel_off # Anti pendel script, to delay switch off for x minutes
    on_release:
      - script.execute: anti_pendel_off
      - script.stop: anti_pendel_on
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Compressor Running"
    id: compressor_running
    register_type: discrete_input
    skip_updates: 1
    address: 3
    on_release:
      then:
        - lambda: |-
            //Update working mode
            id(working_mode) = 0;
            id(anti_pendel_off).stop();
            id(external_pump_script).execute();
    on_press:
      then:
        - lambda: |-
            //Turn on external pump
            //stop the script that stops the pump after x minutes
            //Update working mode
            id(working_mode) = 2;
            id(run_start) = true;
            id(minimum_run_time_passed) = false;
            id(switch_off_requested) = false;
            id(minimum_run_time_script).execute();
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Defrosting"
    id: defrosting
    register_type: discrete_input
    skip_updates: 1
    address: 4
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "SWW Heating"
    id: sww_heating
    register_type: discrete_input
    skip_updates: 1
    address: 5
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Silent Mode"
    id: silent_mode
    register_type: discrete_input
    skip_updates: 1
    address: 7
    on_state:
      then:
        - lambda: |-
            if(id(silent_mode).state != id(silent_mode_switch).state) id(silent_mode_switch).publish_state(id(silent_mode).state);
    
sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Bedrijfsmodus"
    id: bedrijfsmodus
    register_type: read
    address: 1
    #skip_updates: 12
    value_type: U_WORD
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water retour"
    id: water_temp_retour
    register_type: read
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water aanvoer"
    id: water_temp_aanvoer
    register_type: read
    address: 3
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    on_value:
      then:
        - lambda: |-
            //Main program logic this loop runs every 'clock' cycle when modbus data is received for this sensor
            //alive timer logs a message every xx seconds
            static int alive_timer = 0;
            //vector of floats to integrate error (used in control logic)
            static std::vector<float> integral;
            //anti-pendel target
            static float temp_new_target = id(stooklijn_target);
            //Set controller control mode to 'outlet' and set hysteresis to the setting you have on the controller (recommend 4)
            const static int hysteresis = 4;
            //Set to value that anti-pendel script will track (outlet/inlet) (recommend inlet)
            const float tracking_value = id(water_temp_aanvoer).state;
            //bool to indicate that system is in overshoot mode
            static bool overshooting = false;
            //maximum allowable overshoot
            const static int max_overshoot = 3;
            //Hold previous script run ota value to check if it changed since last run
            static float prev_oat = 0;
            //Pump pre run time
            static int pre_run_time = 0;
            //System logic (to switch off agressive target setting after target is reached)
            static bool target_reached = false;

            if(alive_timer == 0){
              //Post an 'alive' debug message in the logs every 300 seconds
              alive_timer = 5; //300 seconds
              ESP_LOGD("anti-pendel", "**alive** oat: %f inlet: %f outlet: %f ",id(buiten_temp).state,id(water_temp_retour).state,x);
            }
            alive_timer--;
            //Wait for valid oat reading
            if(isnan(id(buiten_temp).state)) return;
            //Do not run script if working mode = 0
            if(id(working_mode) == 0) return;
            //Do not run script if in domestic hot water mode (DHW (sww in Dutch))
            //!------ TODO ---!
            //if(id(sww_heating).state) return;

            //Calculate stooklijn target
            float oat = round(id(buiten_temp).state);
            //If no oat change, no update needed, unless forced or first run
            if(prev_oat != oat || id(force_update_stooklijn) || id(run_start)){
              prev_oat = oat;
              //reset force boolean
              id(force_update_stooklijn) = false;
              //Heating
              //Formula is wTemp = (Z x (stooklijn_start_temp - OAT)) + stooklijn_min_wtemp
              //Formula to calculate Z = 0-((stooklijn_max_wtemp-stooklijn_min_wtemp)) / (stooklijn_min_oat - stooklijn_start_temp))
              const float Z =  0 - (float)((id(stooklijn_max_wtemp).state-id(stooklijn_min_wtemp).state)/(id(stooklijn_min_oat).state - id(stooklijn_start_temp).state));
              ESP_LOGD("stooklijn", "Stooklijn, working mode is heating, with oat: %f, Z: %f",oat, Z);
              if(oat < id(stooklijn_min_oat).state) {
                //If oat below minimum oat, clamp to minimum value
                oat = id(stooklijn_min_oat).state;
              } else if (oat > id(stooklijn_start_temp).state) {
                //If oat above max value, clamp to maximum value
                oat = id(stooklijn_start_temp).state;
              }
              id(stooklijn_target) = (int)round( (Z * (id(stooklijn_start_temp).state-oat))+id(stooklijn_min_wtemp).state);
              //Add stooklijn offset
              id(stooklijn_target) = id(stooklijn_target) + id(wp_stooklijn_offset).state;
              //Make sure target is not above max water or below minimum temp
              if(id(stooklijn_target) > id(stooklijn_max_wtemp).state) id(stooklijn_target) = id(stooklijn_max_wtemp).state;
              if(id(stooklijn_target) < id(stooklijn_min_wtemp).state) id(stooklijn_target) = id(stooklijn_min_wtemp).state;
              
              ESP_LOGD("stooklijn", "New stooklijn target value (after correction): %f", id(stooklijn_target));
              //Publish new stooklijn value to watertemp value sensor
              id(watertemp_target).publish_state(id(stooklijn_target));
            }
            
            //Calculate new (anti pendel) target
            //Basic algorithm
            //System initializes at the start of a run (when working mode changes 2)
            //Then sets initial target to 'real' target minus 4. With a minimum of tracking_value + 2 to ensure compressor start.
            //Maximum value is 'real' target. 
            //When the compressor turns on the logic starts running, monitorring the overshoot of the temporary target
            //When the overshoot approaches hysteresis - 1 the temporary target is increased by 1 until temporary target == real target
            //When the temporary target equals the 'real' target temperature, or the tracking value equals the 'real' target the logic stops so the HP can take over again an run its own logic
            //System resets at heating mode stop (system working mode 0) for example when the room thermostat stops the heating or compressor restart with delta > 1.8
            //While the tracking value is above the temporary_target, but below the 'real' target an integral is loaded
            //Every time the integral hits the limit temporary_target is raised by 1.
            if(id(run_start)){
              //Initialize values. run_start is set to true by the switches that control heating mode
              pre_run_time = 3; // equals 180 seconds. Based on 60s 'clock'
              //Activate system
              target_reached = false;
              overshooting = false;
              //clear integral
              integral.clear();
              //Set initial target at stooklijn_target - hysteresis with a minimum of current tracking value + 2
              //and a maximum of stooklijn target. This will ensure compressor start
              temp_new_target = id(stooklijn_target)-hysteresis;
              if(temp_new_target < ceil(tracking_value) + 2 ) temp_new_target = ceil(tracking_value) + 2;
              if(temp_new_target > id(stooklijn_target)) temp_new_target = id(stooklijn_target);
              ESP_LOGD("anti-pendel", "Run start initial target set; stooklijn_target: %f pendel_target: %f inlet: %f outlet: %f",id(stooklijn_target),temp_new_target,x,id(water_temp_retour).state);
              id(run_start) = false;
            }
            if (pre_run_time > 0){
              //Update pre_run_time counter
              ESP_LOGD("anti-pendel", "Waiting for pre_run_time: %i",pre_run_time);
              pre_run_time--;
            }
            //Current Error value
            const float delta = id(stooklijn_target)-tracking_value;
            //Error value in regard to pendel target
            const float pendel_delta = temp_new_target-tracking_value;
            //system will keep initial target until pendel_delta <= -3 and then slowly increase until reaching stooklijn_target
            //Run when compressor is running
            if(id(compressor_running).state){
              if(!target_reached){
                if(pendel_delta <= 0-(hysteresis-1)){
                  //increase target
                  temp_new_target = temp_new_target + 1;
                  //reset integral
                  integral.clear();
                  ESP_LOGD("anti-pendel","Pendel_delta <= 0-(hysteresis-1) increased target.");
                } else if(pendel_delta <= 0){
                  //temperature is more than pendel_target, but lower than pendel_target+(hysteresis-1)
                  //this is ok as a transient condition
                  //push current error into integral
                  float integral_factor = 0.067; //1 degree 15 minutes, 2 degrees 8 minutes, 3 degrees 5 minutes
                  if ((int)id(compressor_rpm) < 25 || delta <= 0) integral_factor = 0.21; //1 degree 5 minutes, 2 degrees 3 minutes, 3 degrees 2 minutes   
                  else if ((int)id(compressor_rpm) > 50) integral_factor = 0.05; //1 degree 21 minutes, 2 degrees 11 minutes, 3 degrees 7 minutes
                  integral.push_back(delta*integral_factor);
                  //limit size to 20 elements
                  if(integral.size() > 20) integral.erase(integral.begin());
                  //check current integral error
                  float integral_I = 0;
                  for(std::vector<float>::iterator it = integral.begin(); it != integral.end(); ++it) {
                    integral_I = integral_I + *it; 
                  }
                  ESP_LOGD("anti-pendel","Pendel_delta <= 0 loaded integral. integral: %f",integral_I);
                  //if integral error is more than 1 
                  if(integral_I >= 1.0){
                    temp_new_target = temp_new_target + 1;
                    //clear integral
                    integral.clear();
                    ESP_LOGD("anti-pendel","Integral >= 1 increased target.");
                  }
                } else {
                  //Waiting for delta te become within range
                  ESP_LOGD("anti-pendel", "Waiting for temperature to reach operational range.");
                }
                if(temp_new_target >= id(stooklijn_target)){
                  //Set target reached
                  temp_new_target = id(stooklijn_target);
                  target_reached = true;
                  //clear integral
                  integral.clear();
                  ESP_LOGD("anti-pendel", "Target reached, setting target_reached=true");
                } 
              } else {
                //target reached
                if(overshooting){
                  //logic to return back to target
                  if((pendel_delta + hysteresis) <= 0 ){
                    //run is about to be killed, raise target if there is still room
                    temp_new_target = temp_new_target + 1;
                    if(temp_new_target > id(stooklijn_target) + max_overshoot) temp_new_target = id(stooklijn_target) + max_overshoot;
                    ESP_LOGD("anti-pendel", "Overshooting and run about to be killed. Raised target (if there was room)");
                  } else if(temp_new_target > id(stooklijn_target)){
                    //check if target can be lowered without killing the run
                    if(pendel_delta + (hysteresis-1) >= 0 ){
                      temp_new_target = temp_new_target - 1;
                    }
                    ESP_LOGD("anti-pendel", "Overshooting, checked if target could be lowered");
                  } else if(delta >= 0) {
                    //all normal again
                    temp_new_target = id(stooklijn_target);
                    overshooting = false;
                    ESP_LOGD("anti-pendel", "Overshooting: all normal setting overshooting=false");
                  }
                } else {
                  if(delta >= 0){
                    if(delta > 1){
                      if(temp_new_target != id(stooklijn_target)){
                        //target_reached = true, but delta > 1 and temp_new_target does not match stooklijn target
                        //probably an update of the stooklijn target
                        //simply declare target_reached false and the algoritm will pick it up throug the integral
                        target_reached = false;
                        ESP_LOGD("anti-pendel", "Target reached, but stooklijn updated setting target_reached=false");
                      }
                    } else if(delta >= 1.8){
                      //Target has been reached, but delta >= 1.8 and target is not changed.
                      //This means that the compressor switched on again after a period of being off. Restart logic
                      integral.clear();
                      //set target again
                      temp_new_target = ceil(tracking_value)-(hysteresis-1);
                      if(temp_new_target > id(stooklijn_target)) temp_new_target = id(stooklijn_target);
                      ESP_LOGD("anti-pendel", "Compressor restart? New target set");
                    }
                  } else {
                    //negative delta (so temp above target, but not (yet) overshooting)
                    overshooting = true;
                    ESP_LOGD("anti-pendel", "Setting overshooting = true;");
                  } 
                }
              }
              ESP_LOGD("anti-pendel", "RETURN_TEMP: %f OUTLET_TEMP: %f TARGET: %f PENDEL_TARGET: %f TRACKING_VALUE: %f DELTA: %f PENDEL_DELTA: %f OVERSHOOTING: %d",id(water_temp_retour).state,x,id(stooklijn_target),temp_new_target,tracking_value,delta,pendel_delta,overshooting);
            }         
            if((float)temp_new_target != (float)id(var_pendel_watertemp_target) || (int)id(var_pendel_watertemp_target) != (int)id(doel_temp).state){
              ESP_LOGD("anti-pendel", "Modbus Update requested. temp_new_target: %f var_pendel_watertemp_target %f/%d doel_temp: %d",temp_new_target,(float)id(var_pendel_watertemp_target),(int)id(pendel_watertemp_target).state,(int)id(doel_temp).state);
              //Set new target
              id(var_pendel_watertemp_target) = temp_new_target;
              //Update sensors
              id(pendel_watertemp_target).publish_state(id(var_pendel_watertemp_target));
              id(doel_temp).publish_state(id(var_pendel_watertemp_target)*10);
              //Update target through modbus (set level needs value between 0-1, so divide by 100)
              id(water_temp_target_output).set_level(id(var_pendel_watertemp_target)*0.01);
            }
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "SWW Temperatuur"
    id: sww_temp
    register_type: read
    address: 5
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Binnen temperatuur"
    id: binnen_temp
    register_type: read
    address: 7
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Flow Rate"
    id: current_flow_rate
    register_type: read
    address: 8
    unit_of_measurement: "L/m"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Buitentemperatuur"
    id: buiten_temp
    register_type: read
    address: 12
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Compressor RPM"
    id: compressor_rpm
    register_type: read
    address: 24
    unit_of_measurement: "RPM"
    value_type: U_WORD
    accuracy_decimals: 0
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Doeltemperatuur"
    id: doel_temp
    register_type: holding
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 3
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "SWW Doeltemperatuur"
    id: sww_target
    register_type: holding
    address: 8
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 3
    filters:
      - multiply: 0.1
  - platform: template
    name: "Stooklijn Watertemp Target"
    id: watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
    lambda: |-
        return id(stooklijn_target);
  - platform: template
    name: "Anti-pendel Watertemp Target"
    id: pendel_watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
    lambda: |-
        return round(id(var_pendel_watertemp_target)*10)/10;
  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 120s
    accuracy_decimals: 0
  - platform: uptime
    name: "${device_name} Uptime"
    unit_of_measurement: days
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574
  - platform: template
    name: "Delta T"
    id: wp_delta_t
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    lambda: |-
      return (float)(id(water_temp_aanvoer).state-id(water_temp_retour).state); 
    update_interval: 20s
# Sensors for ESP version and WIFI information
text_sensor:
  - platform: version
    name: "${device_name} ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "${device_name} ip"
    ssid:
      name: "${device_name} ssid"
